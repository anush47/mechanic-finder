openapi: 3.1.0
info:
  title: Nearby Mechanic Finder API
  version: 1.0.0
  description: API for connecting vehicle owners with nearby mechanics.
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: Auth
    description: Authentication and authorization
  - name: Users
    description: User profile operations
  - name: Mechanics
    description: Mechanic profile and availability
  - name: Bookings
    description: Booking management
  - name: Reviews
    description: Review system
  - name: Admin
    description: Administrative operations
  - name: Notifications
    description: Notification management
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate user and return tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid refresh token
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user and invalidate tokens
      responses:
        "204":
          description: Logout successful
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Unauthorized
    put:
      tags:
        - Users
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfileRequest"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
  /mechanics:
    get:
      tags:
        - Mechanics
      summary: Find mechanics with optional location-based filtering
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
            minimum: -90
            maximum: 90
          required: false
          description: Latitude for location-based search (default 0)
        - in: query
          name: longitude
          schema:
            type: number
            minimum: -180
            maximum: 180
          required: false
          description: Longitude for location-based search (default 0)
        - in: query
          name: radius
          schema:
            type: number
            minimum: 0
            maximum: 20000
          required: false
          description: Search radius in kilometers (default 10)
        - in: query
          name: serviceType
          schema:
            type: string
            enum:
              - "Tire Change"
              - "Oil Change"
              - "Battery Replacement"
              - "Engine Repair"
              - "Brake Service"
              - "Towing"
              - "Jump Start"
              - "Fuel Delivery"
              - "Lockout Service"
          required: false
          description: Filter mechanics by service type
        - in: query
          name: useLocation
          schema:
            type: boolean
          required: false
          description: Whether to use location-based filtering (default false)
      responses:
        "200":
          description: List of mechanics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MechanicProfile"
  /mechanics/profile:
    get:
      tags:
        - Mechanics
      summary: Get current mechanic profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Mechanic profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MechanicProfile"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not a mechanic
        "404":
          description: Profile not found
    post:
      tags:
        - Mechanics
      summary: Create or update mechanic profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MechanicProfileRequest"
      responses:
        "200":
          description: Mechanic profile created or updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MechanicProfile"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not a mechanic
  /mechanics/location:
    put:
      tags:
        - Mechanics
      summary: Update mechanic's current location and availability
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMechanicLocationRequest"
      responses:
        "200":
          description: Location updated successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not a mechanic
        "404":
          description: Mechanic profile not found
  /mechanics/nearby:
    get:
      tags:
        - Mechanics
      summary: Find nearby available mechanics
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
          required: true
          description: Current latitude
        - in: query
          name: longitude
          schema:
            type: number
          required: true
          description: Current longitude
        - in: query
          name: radius
          schema:
            type: number
          required: false
          description: Search radius in kilometers (default 10)
        - in: query
          name: serviceType
          schema:
            type: string
          required: false
          description: Filter by specific service type
      responses:
        "200":
          description: List of nearby mechanics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MechanicProfile"
  /bookings:
    post:
      tags:
        - Bookings
      summary: Create a new booking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookingRequest"
      responses:
        "201":
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Mechanic not found
    get:
      tags:
        - Bookings
      summary: List bookings for current user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, accepted, completed, canceled]
          required: false
          description: Filter bookings by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          required: false
          description: Filter bookings from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          required: false
          description: Filter bookings until this date
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          required: false
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [created_at, scheduled_time]
            default: scheduled_time
          required: false
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          required: false
          description: Sort order
      responses:
        "200":
          description: List of bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Booking"
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        "401":
          description: Unauthorized
  /bookings/{bookingId}:
    get:
      tags:
        - Bookings
      summary: Get booking details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: ID of the booking
      responses:
        "200":
          description: Booking details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not authorized to view this booking
        "404":
          description: Booking not found
    put:
      tags:
        - Bookings
      summary: Update booking status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
          required: true
          description: ID of the booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookingRequest"
      responses:
        "200":
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not authorized to update this booking
        "404":
          description: Booking not found
  /reviews:
    post:
      tags:
        - Reviews
      summary: Submit a review for a mechanic
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReviewRequest"
      responses:
        "201":
          description: Review submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
  /reviews/{mechanicId}:
    get:
      tags:
        - Reviews
      summary: Get reviews for a mechanic
      parameters:
        - in: path
          name: mechanicId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of reviews retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "404":
          description: Mechanic not found
  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "401":
          description: Unauthorized
  /admin/mechanics:
    get:
      tags:
        - Admin
      summary: List all mechanics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of mechanics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MechanicProfile"
        "401":
          description: Unauthorized
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get notifications for current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
    post:
      tags:
        - Notifications
      summary: Mark notifications as read
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationIds:
                  type: array
                  items:
                    type: string
              required:
                - notificationIds
      responses:
        "200":
          description: Notifications marked as read successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
  /admin/dashboard:
    get:
      tags:
        - Admin
      summary: Get dashboard statistics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  totalMechanics:
                    type: integer
                  totalBookings:
                    type: integer
                  totalServices:
                    type: integer
                  recentBookings:
                    type: array
                    items:
                      $ref: "#/components/schemas/Booking"
                  topMechanics:
                    type: array
                    items:
                      $ref: "#/components/schemas/MechanicProfile"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not an admin
  /admin/booking-stats:
    get:
      tags:
        - Admin
      summary: Get booking statistics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Booking statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPending:
                    type: integer
                  totalAccepted:
                    type: integer
                  totalCompleted:
                    type: integer
                  totalCanceled:
                    type: integer
                  averageRating:
                    type: number
                    format: float
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not an admin
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
        role:
          type: string
          enum: [user, mechanic]
      required:
        - email
        - password
        - name
        - role

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: "#/components/schemas/UserProfile"

    UserProfile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, mechanic, admin]
        phone:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateUserProfileRequest:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
      required:
        - name
        - phone

    MechanicProfile:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        services:
          type: array
          items:
            type: string
        availability:
          type: boolean
        rating:
          type: number
        certifications:
          type: array
          items:
            type: string
        experienceYears:
          type: integer
        currentLocation:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        lastLocationUpdate:
          type: string
          format: date-time
        serviceRadiusKm:
          type: number
          default: 10.0

    MechanicProfileRequest:
      type: object
      properties:
        services:
          type: array
          items:
            type: object
            properties:
              serviceId:
                type: string
              customPrice:
                type: number
              isEmergencyAvailable:
                type: boolean
            required:
              - serviceId
          minItems: 1
        certifications:
          type: array
          items:
            type: string
        experienceYears:
          type: integer
          minimum: 0
          maximum: 50
        serviceRadiusKm:
          type: number
          minimum: 1
          maximum: 100
          default: 10
        emergencyAvailable:
          type: boolean
          default: false
      required:
        - services
        - experienceYears
        - certifications

    UpdateMechanicLocationRequest:
      type: object
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        availability:
          type: boolean
      required:
        - latitude
        - longitude
        - availability

    CreateBookingRequest:
      type: object
      properties:
        mechanicId:
          type: string
        serviceLocation:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
            longitude:
              type: number
              minimum: -180
              maximum: 180
          required:
            - latitude
            - longitude
        scheduledTime:
          type: string
          format: date-time
        services:
          type: array
          items:
            type: object
            properties:
              serviceTypeId:
                type: string
              estimatedDuration:
                type: integer
                minimum: 1
                description: Estimated duration in minutes
              estimatedCost:
                type: number
                minimum: 0
                description: Estimated cost of the service
            required:
              - serviceTypeId
              - estimatedDuration
              - estimatedCost
          minItems: 1
        issueDescription:
          type: string
      required:
        - mechanicId
        - serviceLocation
        - scheduledTime
        - services
        - issueDescription

    UpdateBookingRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, accepted, completed, canceled]
        cancellationReason:
          type: string
          description: Required if status is canceled
        actualDuration:
          type: integer
          minimum: 1
          description: Required if status is completed (in minutes)
        finalCost:
          type: number
          minimum: 0
          description: Required if status is completed
      required:
        - status

    Booking:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mechanicId:
          type: string
        serviceLocation:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        scheduledTime:
          type: string
          format: date-time
        serviceType:
          type: string
        issueDescription:
          type: string
        estimatedDuration:
          type: integer
        actualDuration:
          type: integer
        estimatedCost:
          type: number
        finalCost:
          type: number
        status:
          type: string
          enum: [pending, accepted, completed, canceled]
        paymentStatus:
          type: string
          enum: [pending, paid, refunded]
        cancellationReason:
          type: string
        completionTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        mechanic:
          $ref: "#/components/schemas/MechanicProfile"
        user:
          $ref: "#/components/schemas/UserProfile"

    CreateReviewRequest:
      type: object
      properties:
        mechanicId:
          type: string
        rating:
          type: number
        comment:
          type: string
      required:
        - mechanicId
        - rating

    Review:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mechanicId:
          type: string
        rating:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
